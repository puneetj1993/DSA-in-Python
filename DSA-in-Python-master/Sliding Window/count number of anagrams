"""
Count the occurences of anagrams
Input: 
    - arr main string
    - p patern whose anagrams we have to count 
Output:-
    - int, the number of anagrams which are present in the arr main string 
Anagrams are the total number of possible combinations of a pattern. for eg, "for" anagrams - for,fro,orf,rof,ofr,rfo,fro 3!. all these anagrams would have the same length as that of pattern and contains same alphabets as that of parent pattern string.
"""
arr = "abaaabaa"
p = "aaba"
k=len(p)
d={}
# Getting the count of occurences of p string
for i in p:
    if i in d:
        d[i] = d[i] +1
    else:
        d[i] = 1
        
# This is done to prevent traversing the dictionary 
count=len(d)
ans = 0
n=len(arr)
i=j=0
while j<n:
    # if string jth element is present in dictionary then decresing its size
    # and if any element of dictionary becomes 0 then decrement the counter variable. This will make sure that
    # when counter is 0, all the elements of dict are 0 itself(smart way rather than lopping thoourgh dict to check if all the values are 0)
    if arr[j] in d:
        d[arr[j]] = d[arr[j]] - 1
        if d[arr[j]] == 0:
            count = count - 1
    if j-i+1<k:
        j=j+1
    elif j-i+1 == k:
        """
        if count==0 it means all the dictionary elements are present in the window which means this is anagram
        we will increment the counter ans which maintains the count of total number of anagrams 
        """
        if count == 0:
            ans = ans + 1
        # Before sliding the window, handling the ith element. increment the element size in dict d as ith element is removed
        # similarly, increase the count as 1 element is now non zero in dict d
        if arr[i] in d:
            d[arr[i]] = d[arr[i]] + 1
            if d[arr[i]]!=0:
                count = count + 1
            
        # sliding the window    
        j = j+1    
        i=i+1
print(ans)
            
            
        